scalar Date

interface MutationResponse {
    code: Int!
    success: Boolean!
    message: String!
}

interface OrderIndex {
    index: Int!
}


type Book implements OrderIndex{
    index: Int!
    id: ID!
    isbn: String!
    title: String
    author: String
    rating: Float
    totalVotes: Int
    userVote: UserVote
    selected: Boolean
    description: String
    read: Boolean
}

type DeleteMutationResponse implements MutationResponse {
    code: Int!
    success: Boolean!
    message: String!
}

type User {
    id: ID!
    username: String!
    email: String!
    isAdmin: Boolean
}

input UserInput {
    username: String!
    email: String!
    password: String!
}

type UserVote {
    approve: Boolean!
}

type Vote {
    id: ID!
    approve: Boolean!
    book: Book!
}

type Comment implements OrderIndex{
    index: Int!
    id: ID!
    user: User!
    book: Book!
    text: String!
}



type UserMutationResponse implements MutationResponse {
    code: Int!
    success: Boolean!
    message: String!
    userId: ID!
    user: User!
}

type CommentMutationResponse implements MutationResponse {
    code: Int!
    success: Boolean!
    message: String!
    commentId: ID!
    comment: Comment!
}

type LoginResponse {
    code: Int!
    success: Boolean!
    message: String!
    token: String
}

type PaginatedComments {
    book: Book!
    comments: [Comment]!
    startPage: Int!
    count: Int!
    total: Int!}

type PaginatedBooks {
    books: [Book]!
    startPage: Int!
    count: Int!
    total: Int!}

type PaginatedUsers {
    users: [User]!
    startPage: Int!
    count: Int!
    total: Int!}

type PaginatedVotes {
    votes: [Vote]!
    startPage: Int!
    count: Int!
    total: Int!}

type BookMutationResponse implements MutationResponse
{
    code: Int!
    success: Boolean!
    message: String!
    bookId: ID!
    book: Book!
}

type Query {
    loginToken(username: String!, password: String!) : LoginResponse
    book(id: ID!): Book
    books: [Book]!
    currentUser: User
    paginatedCommentsByBook(bookId: ID!, limit: Int!, page: Int!): PaginatedComments
    searchBooksByAuthor(name: String!): [Book]!
    paginatedBooks(limit: Int!, page: Int!): PaginatedBooks
    paginatedUsers(limit: Int!, page: Int!): PaginatedUsers
    paginatedUserVotes(limit: Int!, page: Int!): PaginatedVotes
    unfinishedBooks(limit: Int!, page: Int!): PaginatedBooks
    finishedBooks(limit: Int!, page: Int!): PaginatedBooks
    monthlyBook: Book
}

type Mutation {
    register(user: UserInput): UserMutationResponse
    updateUserAdmin(userId: ID!, admin: Boolean!): UserMutationResponse
    addBook(title: String!, author: String!, description: String!, isbn: String!): BookMutationResponse
    removeBook(bookId: ID!): DeleteMutationResponse
    updateUserPassword(userId: ID!, password: String!): UserMutationResponse
    updateUserEmail(userId: ID!, email: String!): UserMutationResponse
    addComment(userId: ID!, bookId: ID!, text: String!): CommentMutationResponse
    updateComment(commentId: ID!, newText: String!): CommentMutationResponse
    removeComment(commentId: ID!): DeleteMutationResponse
    voteOnBook(userId: ID!, bookId: ID!, approve: Boolean!): VoteMutationResponse
    deleteVoteForUserAndBook(bookId: ID!): DeleteMutationResponse
    finalizeVote: FinaliseVoteMutationResponse
}

type FinaliseVoteMutationResponse implements MutationResponse
{
    code: Int!
    success: Boolean!
    message: String!
    selectedBookId: ID!
    monthlySelection: Book!
}

type VoteMutationResponse implements MutationResponse {
    code: Int!
    success: Boolean!
    message: String!
    voteId: ID!
    vote: Vote!
}
